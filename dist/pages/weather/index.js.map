{"version":3,"sources":["pages/weather/index.js"],"names":["app","getApp","Page","data","statusBarHeight","backgroundImage","backgroundColor","current","temp","weather","humidity","icon","today","tomorrow","city","width","scale","address","lat","lon","updateLocation","res","latitude","longitude","name","setData","getAddress","wx","showLoading","title","mask","fail","e","hideLoading","getWeatherData","result","statusCode","formatted_addresses","address_component","recommend","rough","province","county","district","getLocation","type","success","console","log","openLocation","showToast","duration","onLocation","authSetting","can","chooseLocation","onLoad","getSystemInfo","windowWidth","paddingTop","pages","getCurrentPages","currentPage","length","query","options","goDiary","url","navigateTo","cb","then","render","catch","air","hourly","daily","lifeStyle","oneWord","_today","_tomorrow","minTemp","maxTemp","dayIcon","day","hourlyData","weeklyData","onPullDownRefresh","stopPullDownRefresh","onshareAppMessage","isUpdata","path"],"mappings":"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","file":"index.js","sourcesContent":["/*<remove trigger=\"prod\">*/\nimport { getMood, geocoder } from '../../lib/api'\nimport { getWeather, getAir } from '../../lib/api-mock'\n/*</remove>*/\n/*<jdists trigger=\"prod\">\nimport {getEmotionByOpenidAndDate, getMood, geocoder, getWeather, getAir} from '../../lib/api'\n</jdists>*/\nconst app = getApp()\nPage({\n  data: {\n    statusBarHeight: 32,\n    backgroundImage: \"../../images/cloud.jpg\",\n    backgroundColor: '#62aadc',\n    current: {\n      temp: '0',\n      weather: '数据获取中',\n      humidity: '1',\n      icon: 'xiaolian'\n    },\n    today: {\n      temp: 'N/A',\n      weather: '暂无'\n    },\n    tomorrow: {\n      temp: 'N/A',\n      weather: '暂无'\n    },\n    city: '海口',\n    width: 375,\n    scale: 1,\n    address: '定位中',\n    lat: 40.056974,\n    lon: 116.307689\n  },\n  updateLocation(res) {\n    let { latitude: lat, longitude: lon, name } = res;\n    let data = {\n      lat,\n      lon\n    }\n    if (name) {\n      data.address = name;\n    }\n    this.setData(data);\n    this.getAddress(lat, lon, name)\n  },\n  getAddress(lat, lon, name) {\n    wx.showLoading({\n      title: '定位中',\n      mask: true\n    })\n    let fail = (e) => {\n      this.setData({\n        address: name || '海南大学小仙女宿舍'\n      })\n      wx.hideLoading()\n      this.getWeatherData()\n    }\n    // 获取地址， 腾讯地图逆向地址解析\n    geocoder(\n      lat,\n      lon,\n      (res) => {\n        wx.hideLoading()\n        let result = (res.data || {}).result\n        // console.log(1, res, result)\n        if (res.statusCode === 200 && result && result.address) {\n          let { address, formatted_addresses, address_component } = result\n          if (formatted_addresses && (formatted_addresses.recommend || formatted_addresses.rough)) {\n            address = formatted_addresses.recommend || formatted_addresses.rough\n          }\n          let { province, city, district: county } = address_component\n          this.setData({\n            province,\n            county,\n            city,\n            address: name || address\n          })\n          this.getWeatherData()\n        } else {\n          //失败\n          fail()\n        }\n      },\n      fail\n    )\n  },\n  getLocation() {\n    wx.getLocation({\n      type: 'gcj02',\n      success: (res) => {\n        console.log('location', res);\n        this.updateLocation(res);\n      },\n      fail: (e) => {\n        this.openLocation()\n      }\n    })\n  },\n  openLocation() {\n    wx.showToast({\n      title: '检测到您未授权使用位置权限，请先开启哦',\n      icon: 'none',\n      duration: 3000\n    })\n  },\n  //  地址授权\n  // 应该没有执行？ \n  onLocation() {\n    success: ({authSetting}) => {\n      console.log('onlocation')\n      can = authSetting['scope.userLocation'];\n      if (can) {\n        this.chooseLocation()\n      } else {\n        this.openLocation()\n      }\n    }\n  },\n  chooseLocation() {\n    wx.chooseLocation({\n      success: (res) => {\n        let {latitude, longitude} = res\n        let {lat, lon} = this.data;\n        if (latitude == lat && lon == longitude) {\n          this.getWeatherData()\n        } else {\n          this.updateLocation(res)\n        }\n      }\n    })\n  },\n  onLoad() {\n    // 获取系统信息\n    // 用于系统适配\n    wx.getSystemInfo({\n      success: (res) => {\n        let width = res.windowWidth\n        // 适配\n        let scale = width / 375\n        this.setData({\n          width,\n          scale,\n          paddingTop: res.statusBarHeight + 12\n        })\n      }\n    })\n    const pages = getCurrentPages()  // 获取当前加载页面\n    const currentPage = pages[pages.length - 1] // 获取当前页面对象\n    //  获取分享过来的地址\n    const query = currentPage.options\n    if (query && query.address && query.lat && query.lon) {\n      // setData 是异步的所以需要先获取数据在获取天气数据\n      this.setData({\n        city,\n        province,\n        county,\n        address,\n        lat,\n        lon\n      },\n        () => {\n          this.getWeatherData()\n        })\n    } else {\n      // this.setDataFormCash()\n      this.getLocation()\n    }\n    this.getWeatherData()\n  },\n  // 跳转到签到页面\n  goDiary() {\n    try {\n      let url = `/pages/diary/index`\n      wx.navigateTo({\n        url\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  },\n  // 获取页面数据 天气数据\n  getWeatherData(cb) {\n    wx.showLoading({\n      title: '获取数据中',\n      mask: true\n    })\n    // 失败的回调\n    const fail = (e) => {\n      wx.hideLoading()\n      if (typeof cb === 'function') {\n        cb()\n      }\n      wx.showToast({\n        title: '加载失败， 请稍后重试',\n        icon: 'none',\n        duration: 3000\n      })\n    }\n    const { lat, lon, province, city, county } = this.data\n    // 先传默认的经纬度\n    // console.log('lat, lon', lat, lon)\n    getWeather(lat, lon)\n      .then((res) => {\n        // console.log('dskabd', res.result)\n        wx.hideLoading()\n        if (typeof cb === 'function') {\n          cb()\n        }\n        if (res.result) {\n          this.render(res.result);\n          console.log('res.result:', res.result)\n        } else {\n          fail();\n        }\n      })\n      .catch(fail)\n    // 获取空气质量\n    getAir(city)\n      .then((res) => {\n        // 严谨一点\n        if (res && res.result) {\n          // console.log('air', res.result)\n          this.setData({\n            air: res.result\n          })\n        }\n      })\n      .catch((e) => { })\n  },\n  render(data) {\n    // isUpdata = true;\n    const {width, scale} = this.data;\n    const {hourly, daily, current, lifeStyle, oneWord = ''} = data;\n    const {backgroundColor, backgroundImage} = current;\n    const _today = daily[0],\n      _tomorrow = daily[1];\n    const today = {\n      temp: `${_today.minTemp}/${_today.maxTemp}°`,\n      icon: _today.dayIcon,\n      weather: _today.day\n    }\n    const tomorrow = {\n      temp: `${_tomorrow.minTemp}/${_tomorrow.maxTemp}°`,\n      icon: _tomorrow.dayIcon,\n      weather: _tomorrow.day\n    }\n    this.setData({\n      hourlyData: hourly,\n      weeklyData: daily,\n      current,\n      backgroundImage,\n      backgroundColor,\n      today,\n      tomorrow,\n      oneWord,\n      lifeStyle\n    })\n  },\n  onPullDownRefresh() {\n    this.getWeatherData(() => {\n      wx.stopPullDownRefresh()\n    })\n  },\n  // 一个分享, 分享你当前地址的天气状况\n  onshareAppMessage() {\n    if (!isUpdata) {\n      return {\n        title: '我发现了一个好玩的天气小程序，分享给你看看！',\n        path: 'pages/weather/index'\n      }\n    } else {\n      const { lat, lon, address, province, city, county } = this.data\n      let url = `/pages/weather/index?lat=${lat}&lon=${lon}&address=${address}&province=${province}&city=${city}&county=${county}`\n      return {\n        title: `「${address}」现在天气情况，快打开看看吧！`,\n        path: url\n      }\n    }\n  }\n})"]}