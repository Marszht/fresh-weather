{"version":3,"sources":["lib/api.js"],"names":["wx","cloud","init","env","db","database","getEmotionByOpenidAndDate","openid","year","month","_","command","parseInt","now","Date","curMonth","getMonth","curYear","getFullYear","curDay","getDate","start","getTime","end","collection","where","tsModified","gte","and","lt","get","Promise","resolve","reject","all","orderBy","limit","then","data","data1","data2","set","Set","concat","filter","v","has","_id","add","catch","e","addEmotion","emotion","getWeather","lat","lon","callFunction","name","getAir","city"],"mappings":"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","file":"api.js","sourcesContent":["// 真正api 文件\nimport Promise from './bluebird'\n// 初始化云函数环境\nwx.cloud.init({\n  env: 'fresh-weather-34df96'\n})\nconst db = wx.cloud.database();\n// 根据openid 和 日期获取月份相应签到日期的颜色\nexport const getEmotionByOpenidAndDate = (openid, year, month) => {\n  const _ = db.command  // 取指令\n  year = parseInt(year)\n  month = parseInt(month)\n  const now = new Date();\n  const curMonth = now.getMonth();\n  const curYear = now.getFullYear();\n  const curDay = now.getDate();\n  let start = new Date(year, month - 1, 1).getTime();\n  let end = new Date(year, month, 1).getTime();\n  // console.log(curYear, curDay, curMonth)\n  if (month - 1 === curMonth && curDay <= 20 && year === curYear) {\n    // 如果是当前月份并且天数少于20，那么就一次取出\n    return db\n      .collection('diary')\n      .where({\n        openid,\n        tsModified: _.gte(start).and(_.lt(end))\n      })\n      .get()\n  }\n  // 这里因为限制 limit20，所以查询两次，一共31条（最多31天）记录\n  return new Promise((resolve, reject) => {\n    Promise.all([\n      db\n        .collection('diary')\n        .where({\n          openid,\n          tsModified: _.gte(start).and(_.lt(end))\n        })\n        .orderBy('tsModified', 'desc')\n        .limit(15)\n        .get(),\n        db\n          .collection('diary')\n          .where({\n            openid,\n            tsModified: _.gte(start).and(_.lt(end))\n          })\n          .orderBy('tsMOdified', 'asc')\n          .limit(16)\n          .get()\n    ])\n      .then((data) => {\n        let [data1, data2] = data;\n        let set = new Set()\n        data1 = data1.data || []\n        data2 = data2.data || []\n        // 把这两个月的链接起来\n        data = data1.concat(data2).filter((v) => {\n          if (set.has(v._id)) {\n            return false\n          }\n          set.add(v._id)\n          return true\n        })\n        resolve({data})\n      })\n      .catch((e) => {\n        reject(e)\n      })\n  })  \n}\n// 增加一条数据， 传参openid & emotion\nexport const addEmotion = (openid, emotion) => {\n  return db.collection('diary').add({\n    data: {\n      openid,\n      emotion,\n      tsModified: Date.now()\n    }\n  })\n}\n/**\n * 获取空气数据\n * @param {*} lat\n * @param {*} lon\n */\nexport const getWeather = (lat, lon) => {\n  return wx.cloud.callFunction({\n    name: 'he-weather',\n    data: {\n      lat,\n      lon\n    }\n  })\n}\n/**\n * 空气质量\n * @param {*} city\n */\nexport const getAir = (city) => {\n  return wx.cloud.callFunction({\n    name: 'he-air',\n    data: {\n      city\n    }\n  })\n}\n"]}