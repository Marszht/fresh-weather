{"version":3,"sources":["lib/utils.js"],"names":["dateFormat","d","pattern","y","getFullYear","toString","o","M","getMonth","getDate","h","getHours","m","getMinutes","s","getSeconds","replace","a","b","substr","Math","min","length","i","RegExp","fixChart","ctx","width","height","devicePixelRatio","measureText","str","lg","measureTextXscale","realLength","measureTextToolTip","canvas","style","display","getAttribute","name","getChartConfig","data","getChartData","lineData","labels","dates","datasets","maxData","fill","borderWidth","borderColor","pointStyle","pointRadius","ponitBackgroundColor","ponitBorderWidth","lineTension","minData","pointBackgroundColor","pointBorderWidth","type","redraw","options","responsive","maintainAspectRatio","legend","tooltips","enabled","scaleLabel","scales","yAxes","xAxes","layout","padding","left","right","top","bottom","forEach","date","maxTemp","minTemp","push"],"mappings":";;;;;AAAA;AACO,IAAMA,kCAAa,SAAbA,UAAa,CAACC,CAAD,EAA+B;AAAA,MAA3BC,OAA2B,uEAAjB,YAAiB;;AACvD,MAAIC,IAAIF,EAAEG,WAAF,GAAgBC,QAAhB,EAAR;AAAA,MACAC,IAAI;AACFC,OAAGN,EAAEO,QAAF,KAAe,CADhB;AAEFP,OAAGA,EAAEQ,OAAF,EAFD;AAGFC,OAAGT,EAAEU,QAAF,EAHD,EAGe;AACjBC,OAAGX,EAAEY,UAAF,EAJD,EAIiB;AACnBC,OAAGb,EAAEc,UAAF,EALD,CAKgB;AALhB,GADJ;AAQAb,YAAUA,QAAQc,OAAR,CAAgB,QAAhB,EAA0B,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACjD,WAAOf,EAAEgB,MAAF,CAAS,IAAIC,KAAKC,GAAL,CAAS,CAAT,EAAYH,EAAEI,MAAd,CAAb,CAAP;AACD,GAFS,CAAV;;AATuD,6BAY9CC,CAZ8C;AAarDrB,cAAUA,QAAQc,OAAR,CAAgB,IAAIQ,MAAJ,CAAW,MAAMD,CAAN,GAAU,IAArB,EAA2B,GAA3B,CAAhB,EAAiD,UAASN,CAAT,EAAYC,CAAZ,EAAe;AACxE,aAAOZ,EAAEiB,CAAF,IAAO,EAAP,IAAaL,EAAEI,MAAF,GAAW,CAAxB,GAA4B,MAAMhB,EAAEiB,CAAF,CAAlC,GAAyCjB,EAAEiB,CAAF,CAAhD;AACD,KAFS,CAAV;AAbqD;;AAYvD,OAAK,IAAIA,CAAT,IAAcjB,CAAd,EAAiB;AAAA,UAARiB,CAAQ;AAIhB;AACD,SAAOrB,OAAP;AACD,CAlBM;AAmBA,IAAMuB,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,KAAN,EAAaC,MAAb,EAAwB;AAC9CF,MAAIG,gBAAJ,GAAuB,CAAvB;AACA,MAAIF,QAAO,GAAX,EAAgB;AACdD,QAAII,WAAJ,GAAkB,UAASC,GAAT,EAAc;AAC9B;AACA,UAAIC,KAAK,CAAC,KAAKD,GAAN,EAAWT,MAApB;AACAU,WAAKA,KAAK,CAAV;AACA,aAAO;AACLL,eAAOK;AADF,OAAP;AAGD,KAPD;AAQD;AACDN,MAAIO,iBAAJ,GAAwB,UAASF,GAAT,EAAc;AACpC,QAAIC,KAAKE,WAAW,KAAKH,GAAhB,CAAT;AACA,WAAO;AACLJ,aAAOK;AADF,KAAP;AAGD,GALD;AAMAN,MAAIS,kBAAJ,GAAyB,UAASJ,GAAT,EAAc;AACrC,QAAIC,KAAKE,WAAW,KAAKH,GAAhB,CAAT;AACA,WAAO;AACLJ,aAAOK,KAAK;AADP,KAAP;AAGD,GALD;AAMAN,MAAIU,MAAJ,GAAa;AACX;AACAT,gBAFW;AAGXC;AAHW,GAAb;AAKAF,MAAIU,MAAJ,CAAWC,KAAX,GAAmB;AACjBV,gBADiB;AAEjBC,kBAFiB;AAGjBU,aAAS;AAHQ,GAAnB;AAKAZ,MAAIU,MAAJ,CAAWG,YAAX,GAA0B,UAASC,IAAT,EAAe;AACvC,QAAIA,QAAQ,OAAZ,EAAqB;AACnB,aAAOd,IAAIU,MAAJ,CAAWT,KAAlB;AACD;AACD,QAAIa,QAAQ,QAAZ,EAAsB;AACpB,aAAOd,IAAIU,MAAJ,CAAWT,KAAlB;AACD;AACF,GAPD;AAQD,CA1CM;AA2CA,IAAMc,0CAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AACtCA,SAAOC,aAAaD,IAAb,CAAP;AACA,MAAIE,WAAW;AACbC,YAAQH,KAAKI,KADA;AAEbC,cAAU,CACR;AACEL,YAAMA,KAAKM,OADb;AAEEC,YAAM,KAFR;AAGEC,mBAAa,CAHf;AAIEC,mBAAa,SAJf;AAKEC,kBAAY,QALd;AAMEC,mBAAa,CANf;AAOEC,4BAAsB,SAPxB;AAQEC,wBAAkB,CARpB;AASEC,mBAAa;AATf,KADQ,EAYR;AACEd,YAAMA,KAAKe,OADb;AAEER,YAAM,KAFR;AAGEC,mBAAa,CAHf;AAIEC,mBAAa,SAJf;AAKEC,kBAAY,QALd;AAMEC,mBAAa,CANf;AAOEK,4BAAsB,SAPxB;AAQEC,wBAAkB,CARpB;AASEH,mBAAa;AATf,KAZQ;AAFG,GAAf;AA2BA,SAAO;AACLI,UAAM,MADD;AAELlB,UAAME,QAFD;AAGLiB,YAAQ,IAHH;AAILC,aAAS;AACPC,kBAAY,IADL;AAEPC,2BAAqB,KAFd;AAGPC,cAAQ;AACN3B,iBAAS;AADH,OAHD;AAMP4B,gBAAU;AACRC,iBAAS;AADD,OANH;AASPC,kBAAY;AACV9B,iBAAS;AADC,OATL;AAYP+B,cAAQ;AACNC,eAAO,CACL;AACEhC,mBAAS;AADX,SADK,CADD;AAMNiC,eAAO,CACL;AACEjC,mBAAS;AADX,SADK;AAND,OAZD;AAwBPkC,cAAQ;AACNC,iBAAS;AACPC,gBAAM,EADC;AAEPC,iBAAO,EAFA;AAGPC,eAAK,EAHE;AAIPC,kBAAQ;AAJD;AADH;AAxBD;AAJJ,GAAP;AAsCD,CAnEM;AAoEA,IAAMlC,sCAAe,SAAfA,YAAe,CAACD,IAAD,EAAU;AACpC,MAAII,QAAQ,EAAZ;AAAA,MACEE,UAAU,EADZ;AAAA,MAEES,UAAU,EAFZ;AAGA,MAAIf,QAAQA,KAAKpB,MAAjB,EAAyB;AACvBoB,SAAKoC,OAAL,CAAa,gBAA8B;AAAA,UAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,UAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,UAAbC,OAAa,QAAbA,OAAa;;AACzCnC,YAAMoC,IAAN,CAAWH,IAAX;AACA/B,cAAQkC,IAAR,CAAaF,OAAb;AACAvB,cAAQyB,IAAR,CAAaD,OAAb;AACD,KAJD;AAKD;AACD,SAAO;AACLnC,gBADK;AAELE,oBAFK;AAGLS;AAHK,GAAP;AAKD,CAhBM","file":"utils.js","sourcesContent":["//  一个时间格式化函数， 一般放在utils中\nexport const dateFormat = (d, pattern = 'yyyy-MM-dd') => {\n  let y = d.getFullYear().toString(),\n  o = {\n    M: d.getMonth() + 1,\n    d: d.getDate(),\n    h: d.getHours(), //hour\n    m: d.getMinutes(), //minute\n    s: d.getSeconds() //second\n  };\n  pattern = pattern.replace(/(y+)/gi, function(a, b) {\n    return y.substr(4 - Math.min(4, b.length))\n  })\n  for (let i in o) {\n    pattern = pattern.replace(new RegExp('(' + i + '+)', 'g'), function(a, b) {\n      return o[i] < 10 && b.length > 1 ? '0' + o[i] : o[i];\n    })\n  }\n  return pattern;\n}\nexport const fixChart = (ctx, width, height) => {\n  ctx.devicePixelRatio = 1;\n  if (width< 305) {\n    ctx.measureText = function(str) {\n      //  为了小屏手机\n      let lg = ('' + str).length;\n      lg = lg * 5\n      return {\n        width: lg\n      }\n    }\n  }\n  ctx.measureTextXscale = function(str) {\n    let lg = realLength('' + str);\n    return {\n      width: lg\n    }\n  }\n  ctx.measureTextToolTip = function(str) {\n    let lg = realLength('' + str)\n    return {\n      width: lg * 5.95\n    }\n  }\n  ctx.canvas = {\n    // 微信小程序没有canvas 对象， 我们造一个\n    width,\n    height\n  }\n  ctx.canvas.style = {\n    width,\n    height,\n    display: 'block'\n  }\n  ctx.canvas.getAttribute = function(name) {\n    if (name == 'width') {\n      return ctx.canvas.width;\n    };\n    if (name == 'height') {\n      return ctx.canvas.width;\n    }\n  }\n}\nexport const getChartConfig = (data) => {\n  data = getChartData(data);\n  let lineData = {\n    labels: data.dates,\n    datasets: [\n      {\n        data: data.maxData,\n        fill: false,\n        borderWidth: 2,\n        borderColor: '#FFB74D',\n        pointStyle: 'circle',\n        pointRadius: 3,\n        ponitBackgroundColor: '#FFB74D',\n        ponitBorderWidth: 1,\n        lineTension: 0.5\n      },\n      {\n        data: data.minData,\n        fill: false,\n        borderWidth: 2,\n        borderColor: '#4FC3F7',\n        pointStyle: 'circle',\n        pointRadius: 3,\n        pointBackgroundColor: '#4FC3F7',\n        pointBorderWidth: 1,\n        lineTension: 0.5\n      }\n    ]\n  }\n  return {\n    type: 'line',\n    data: lineData,\n    redraw: true,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      tooltips: {\n        enabled: false\n      },\n      scaleLabel: {\n        display: false\n      },\n      scales: {\n        yAxes: [\n          {\n            display: false\n          }\n        ],\n        xAxes: [\n          {\n            display: false\n          }\n        ]\n      },\n      layout: {\n        padding: {\n          left: 26,\n          right: 26,\n          top: 30,\n          bottom: 30\n        }\n      }\n    }\n  }\n}\nexport const getChartData = (data) => {\n  let dates = [],\n    maxData = [],\n    minData = []\n  if (data && data.length) {\n    data.forEach(({date, maxTemp, minTemp}) => {\n      dates.push(date)\n      maxData.push(maxTemp)\n      minData.push(minTemp)\n    })\n  }\n  return {\n    dates,\n    maxData,\n    minData\n  }\n}"]}