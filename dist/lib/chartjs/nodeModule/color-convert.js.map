{"version":3,"sources":["lib/chartjs/nodeModule/color-convert.js"],"names":["conversions","require","convert","Converter","func","arg","Array","prototype","slice","call","arguments","pair","exec","from","to","val","undefined","i","length","Math","round","convs","routeSpace","space","args","values","getValues","setValues","vals","fspace","forEach","module","exports"],"mappings":"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","file":"color-convert.js","sourcesContent":["var conversions = require(\"./conversions\");\nvar convert = function() {\n   return new Converter();\n}\nfor (var func in conversions) {\n  // export Raw versions\n  convert[func + \"Raw\"] =  (function(func) {\n    // accept array or plain args\n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      return conversions[func](arg);\n    }\n  })(func);\n  var pair = /(\\w+)2(\\w+)/.exec(func),\n      from = pair[1],\n      to = pair[2];\n  // export rgb2hsl and [\"rgb\"][\"hsl\"]\n  convert[from] = convert[from] || {};\n  convert[from][to] = convert[func] = (function(func) { \n    return function(arg) {\n      if (typeof arg == \"number\")\n        arg = Array.prototype.slice.call(arguments);\n      var val = conversions[func](arg);\n      if (typeof val == \"string\" || val === undefined)\n        return val; // keyword\n      for (var i = 0; i < val.length; i++)\n        val[i] = Math.round(val[i]);\n      return val;\n    }\n  })(func);\n}\n/* Converter does lazy conversion and caching */\nvar Converter = function() {\n   this.convs = {};\n};\n/* Either get the values for a space or\n  set the values for a space, depending on args */\nConverter.prototype.routeSpace = function(space, args) {\n   var values = args[0];\n   if (values === undefined) {\n      // color.rgb()\n      return this.getValues(space);\n   }\n   // color.rgb(10, 10, 10)\n   if (typeof values == \"number\") {\n      values = Array.prototype.slice.call(args);        \n   }\n   return this.setValues(space, values);\n};\n/* Set the values for a space, invalidating cache */\nConverter.prototype.setValues = function(space, values) {\n   this.space = space;\n   this.convs = {};\n   this.convs[space] = values;\n   return this;\n};\n/* Get the values for a space. If there's already\n  a conversion for the space, fetch it, otherwise\n  compute it */\nConverter.prototype.getValues = function(space) {\n   var vals = this.convs[space];\n   if (!vals) {\n      var fspace = this.space,\n          from = this.convs[fspace];\n      vals = convert[fspace][space](from);\n      this.convs[space] = vals;\n   }\n  return vals;\n};\n[\"rgb\", \"hsl\", \"hsv\", \"cmyk\", \"keyword\"].forEach(function(space) {\n   Converter.prototype[space] = function(vals) {\n      return this.routeSpace(space, arguments);\n   }\n});\nmodule.exports = convert;"]}