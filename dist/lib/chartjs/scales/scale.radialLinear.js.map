{"version":3,"sources":["lib/chartjs/scales/scale.radialLinear.js"],"names":["module","exports","Chart","helpers","globalDefaults","defaults","global","defaultConfig","display","animate","lineArc","position","angleLines","color","lineWidth","ticks","showLabelBackdrop","backdropColor","backdropPaddingY","backdropPaddingX","callback","Ticks","formatters","linear","pointLabels","fontSize","label","LinearRadialScale","LinearScaleBase","extend","getValueCount","chart","data","labels","length","setDimensions","me","opts","options","tickOpts","width","maxWidth","height","maxHeight","xCenter","Math","round","yCenter","minSize","min","tickFontSize","getValueOrDefault","defaultFontSize","drawingArea","determineDataLimits","max","each","datasets","dataset","datasetIndex","isDatasetVisible","meta","getDatasetMeta","rawValue","index","value","getRightValue","isNaN","hidden","handleTickRangeOptions","getTickLimit","maxTicksLimit","ceil","convertTicksToLabels","prototype","call","map","getLabelForIndex","fit","pointLabelFontSize","pointLabeFontStyle","fontStyle","defaultFontStyle","pointLabeFontFamily","fontFamily","defaultFontFamily","pointLabeFont","fontString","largestPossibleRadius","pointPosition","i","textWidth","halfTextWidth","furthestRight","furthestRightIndex","furthestRightAngle","furthestLeft","furthestLeftIndex","furthestLeftAngle","xProtrusionLeft","xProtrusionRight","radiusReductionRight","radiusReductionLeft","ctx","font","setFontSize","getPointPosition","measureText","angleRadians","getIndexAngle","PI","angle","x","sin","isNumber","setCenterPoint","leftMovement","rightMovement","maxRight","maxLeft","left","top","angleMultiplier","startAngle","startAngleRadians","getDistanceFromCenterForValue","scalingFactor","reverse","distanceFromCenter","thisAngle","cos","y","getPointPositionForValue","getBasePosition","beginAtZero","draw","gridLineOpts","gridLines","angleLineOpts","pointLabelOpts","tickFontStyle","tickFontFamily","tickLabelFont","yCenterOffset","ticksAsNumbers","yHeight","setStrokeStyle","getValueAtIndexOrDefault","setLineWidth","beginPath","arc","closePath","stroke","moveTo","lineTo","tickFontColor","fontColor","defaultFontColor","labelWidth","setFillStyle","fillRect","textAlign","textBaseline","fillText","outerDistance","outerPosition","pointLabelPosition","pointLabelFontColor","scaleService","registerScaleType"],"mappings":"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","file":"scale.radialLinear.js","sourcesContent":["'use strict';\nmodule.exports = function(Chart) {\n\tvar helpers = Chart.helpers;\n\tvar globalDefaults = Chart.defaults.global;\n\tvar defaultConfig = {\n\t\tdisplay: true,\n\t\t// Boolean - Whether to animate scaling the chart from the centre\n\t\tanimate: true,\n\t\tlineArc: false,\n\t\tposition: 'chartArea',\n\t\tangleLines: {\n\t\t\tdisplay: true,\n\t\t\tcolor: 'rgba(0, 0, 0, 0.1)',\n\t\t\tlineWidth: 1\n\t\t},\n\t\t// label settings\n\t\tticks: {\n\t\t\t// Boolean - Show a backdrop to the scale label\n\t\t\tshowLabelBackdrop: true,\n\t\t\t// String - The colour of the label backdrop\n\t\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\t\t\t// Number - The backdrop padding above & below the label in pixels\n\t\t\tbackdropPaddingY: 2,\n\t\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\t\tbackdropPaddingX: 2,\n\t\t\tcallback: Chart.Ticks.formatters.linear\n\t\t},\n\t\tpointLabels: {\n\t\t\t// Number - Point label font size in pixels\n\t\t\tfontSize: 10,\n\t\t\t// Function - Used to convert point labels\n\t\t\tcallback: function(label) {\n\t\t\t\treturn label;\n\t\t\t}\n\t\t}\n\t};\n\tvar LinearRadialScale = Chart.LinearScaleBase.extend({\n\t\tgetValueCount: function() {\n\t\t\treturn this.chart.data.labels.length;\n\t\t},\n\t\tsetDimensions: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\t// Set the unconstrained dimension before label rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.height = me.maxHeight;\n\t\t\tme.xCenter = Math.round(me.width / 2);\n\t\t\tme.yCenter = Math.round(me.height / 2);\n\t\t\tvar minSize = helpers.min([me.height, me.width]);\n\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\tme.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);\n\t\t},\n\t\tdetermineDataLimits: function() {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart;\n\t\t\tme.min = null;\n\t\t\tme.max = null;\n\t\t\thelpers.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\t\thelpers.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (me.min === null) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t} else if (value < me.min) {\n\t\t\t\t\t\t\tme.min = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (me.max === null) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t} else if (value > me.max) {\n\t\t\t\t\t\t\tme.max = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\t\tme.handleTickRangeOptions();\n\t\t},\n\t\tgetTickLimit: function() {\n\t\t\tvar tickOpts = this.options.ticks;\n\t\t\tvar tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\treturn Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));\n\t\t},\n\t\tconvertTicksToLabels: function() {\n\t\t\tvar me = this;\n\t\t\tChart.LinearScaleBase.prototype.convertTicksToLabels.call(me);\n\t\t\t// Point labels\n\t\t\tme.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);\n\t\t},\n\t\tgetLabelForIndex: function(index, datasetIndex) {\n\t\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t\t},\n\t\tfit: function() {\n\t\t\t/*\n\t\t\t * Right, this is really confusing and there is a lot of maths going on here\n\t\t\t * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t\t\t *\n\t\t\t * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t\t\t *\n\t\t\t * Solution:\n\t\t\t *\n\t\t\t * We assume the radius of the polygon is half the size of the canvas at first\n\t\t\t * at each index we check if the text overlaps.\n\t\t\t *\n\t\t\t * Where it does, we store that angle and that index.\n\t\t\t *\n\t\t\t * After finding the largest index and angle we calculate how much we need to remove\n\t\t\t * from the shape radius to move the point inwards by that x.\n\t\t\t *\n\t\t\t * We average the left and right distances to get the maximum shape radius that can fit in the box\n\t\t\t * along with labels.\n\t\t\t *\n\t\t\t * Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t\t\t * on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t\t\t *\n\t\t\t * This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t\t\t * and position it in the most space efficient manner\n\t\t\t *\n\t\t\t * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\t\t\t */\n\t\t\tvar pointLabels = this.options.pointLabels;\n\t\t\tvar pointLabelFontSize = helpers.getValueOrDefault(pointLabels.fontSize, globalDefaults.defaultFontSize);\n\t\t\tvar pointLabeFontStyle = helpers.getValueOrDefault(pointLabels.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\tvar pointLabeFontFamily = helpers.getValueOrDefault(pointLabels.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\tvar pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);\n\t\t\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t\t\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\t\t\tvar largestPossibleRadius = helpers.min([(this.height / 2 - pointLabelFontSize - 5), this.width / 2]),\n\t\t\t\tpointPosition,\n\t\t\t\ti,\n\t\t\t\ttextWidth,\n\t\t\t\thalfTextWidth,\n\t\t\t\tfurthestRight = this.width,\n\t\t\t\tfurthestRightIndex,\n\t\t\t\tfurthestRightAngle,\n\t\t\t\tfurthestLeft = 0,\n\t\t\t\tfurthestLeftIndex,\n\t\t\t\tfurthestLeftAngle,\n\t\t\t\txProtrusionLeft,\n\t\t\t\txProtrusionRight,\n\t\t\t\tradiusReductionRight,\n\t\t\t\tradiusReductionLeft;\n\t\t\tthis.ctx.font = pointLabeFont;\n\t\t\tthis.ctx.setFontSize(pointLabelFontSize);\n\t\t\tfor (i = 0; i < this.getValueCount(); i++) {\n\t\t\t\t// 5px to space the text slightly out - similar to what we do in the draw function.\n\t\t\t\tpointPosition = this.getPointPosition(i, largestPossibleRadius);\n\t\t\t\ttextWidth = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : '').width + 5;\n\t\t\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\t\t\tvar angleRadians = this.getIndexAngle(i) + (Math.PI / 2);\n\t\t\t\tvar angle = (angleRadians * 360 / (2 * Math.PI)) % 360;\n\t\t\t\tif (angle === 0 || angle === 180) {\n\t\t\t\t\t// At angle 0 and 180, we're at exactly the top/bottom\n\t\t\t\t\t// of the radar chart, so text will be aligned centrally, so we'll half it and compare\n\t\t\t\t\t// w/left and right text sizes\n\t\t\t\t\thalfTextWidth = textWidth / 2;\n\t\t\t\t\tif (pointPosition.x + halfTextWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + halfTextWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (pointPosition.x - halfTextWidth < furthestLeft) {\n\t\t\t\t\t\tfurthestLeft = pointPosition.x - halfTextWidth;\n\t\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t\t}\n\t\t\t\t} else if (angle < 180) {\n\t\t\t\t\t// Less than half the values means we'll left align the text\n\t\t\t\t\tif (pointPosition.x + textWidth > furthestRight) {\n\t\t\t\t\t\tfurthestRight = pointPosition.x + textWidth;\n\t\t\t\t\t\tfurthestRightIndex = i;\n\t\t\t\t\t}\n\t\t\t\t// More than half the values means we'll right align the text\n\t\t\t\t} else if (pointPosition.x - textWidth < furthestLeft) {\n\t\t\t\t\tfurthestLeft = pointPosition.x - textWidth;\n\t\t\t\t\tfurthestLeftIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\txProtrusionLeft = furthestLeft;\n\t\t\txProtrusionRight = Math.ceil(furthestRight - this.width);\n\t\t\tfurthestRightAngle = this.getIndexAngle(furthestRightIndex);\n\t\t\tfurthestLeftAngle = this.getIndexAngle(furthestLeftIndex);\n\t\t\tradiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI / 2);\n\t\t\tradiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI / 2);\n\t\t\t// Ensure we actually need to reduce the size of the chart\n\t\t\tradiusReductionRight = (helpers.isNumber(radiusReductionRight)) ? radiusReductionRight : 0;\n\t\t\tradiusReductionLeft = (helpers.isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;\n\t\t\tthis.drawingArea = Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2);\n\t\t\tthis.setCenterPoint(radiusReductionLeft, radiusReductionRight);\n\t\t},\n\t\tsetCenterPoint: function(leftMovement, rightMovement) {\n\t\t\tvar me = this;\n\t\t\tvar maxRight = me.width - rightMovement - me.drawingArea,\n\t\t\t\tmaxLeft = leftMovement + me.drawingArea;\n\t\t\tme.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);\n\t\t\t// Always vertically in the centre as the text height doesn't change\n\t\t\tme.yCenter = Math.round((me.height / 2) + me.top);\n\t\t},\n\t\tgetIndexAngle: function(index) {\n\t\t\tvar angleMultiplier = (Math.PI * 2) / this.getValueCount();\n\t\t\tvar startAngle = this.chart.options && this.chart.options.startAngle ?\n\t\t\t\tthis.chart.options.startAngle :\n\t\t\t\t0;\n\t\t\tvar startAngleRadians = startAngle * Math.PI * 2 / 360;\n\t\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\t\treturn index * angleMultiplier - (Math.PI / 2) + startAngleRadians;\n\t\t},\n\t\tgetDistanceFromCenterForValue: function(value) {\n\t\t\tvar me = this;\n\t\t\tif (value === null) {\n\t\t\t\treturn 0; // null always in center\n\t\t\t}\n\t\t\t// Take into account half font size + the yPadding of the top value\n\t\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\t\tif (me.options.reverse) {\n\t\t\t\treturn (me.max - value) * scalingFactor;\n\t\t\t}\n\t\t\treturn (value - me.min) * scalingFactor;\n\t\t},\n\t\tgetPointPosition: function(index, distanceFromCenter) {\n\t\t\tvar me = this;\n\t\t\tvar thisAngle = me.getIndexAngle(index);\n\t\t\treturn {\n\t\t\t\tx: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,\n\t\t\t\ty: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter\n\t\t\t};\n\t\t},\n\t\tgetPointPositionForValue: function(index, value) {\n\t\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t\t},\n\t\tgetBasePosition: function() {\n\t\t\tvar me = this;\n\t\t\tvar min = me.min;\n\t\t\tvar max = me.max;\n\t\t\treturn me.getPointPositionForValue(0,\n\t\t\t\tme.beginAtZero? 0:\n\t\t\t\tmin < 0 && max < 0? max :\n\t\t\t\tmin > 0 && max > 0? min :\n\t\t\t\t0);\n\t\t},\n\t\tdraw: function() {\n\t\t\tvar me = this;\n\t\t\tvar opts = me.options;\n\t\t\tvar gridLineOpts = opts.gridLines;\n\t\t\tvar tickOpts = opts.ticks;\n\t\t\tvar angleLineOpts = opts.angleLines;\n\t\t\tvar pointLabelOpts = opts.pointLabels;\n\t\t\tvar getValueOrDefault = helpers.getValueOrDefault;\n\t\t\tif (opts.display) {\n\t\t\t\tvar ctx = me.ctx;\n\t\t\t\t// Tick Font\n\t\t\t\tvar tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\tvar tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\t\tvar tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\t\tvar tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);\n\t\t\t\thelpers.each(me.ticks, function(label, index) {\n\t\t\t\t\t// Don't draw a centre value (if it is minimum)\n\t\t\t\t\tif (index > 0 || opts.reverse) {\n\t\t\t\t\t\tvar yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\t\t\t\t\t\tvar yHeight = me.yCenter - yCenterOffset;\n\t\t\t\t\t\t// Draw circular lines around the scale\n\t\t\t\t\t\tif (gridLineOpts.display && index !== 0) {\n\t\t\t\t\t\t\tctx.setStrokeStyle(helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1));\n\t\t\t\t\t\t\tctx.setLineWidth(helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1));\n\t\t\t\t\t\t\tif (opts.lineArc) {\n\t\t\t\t\t\t\t\t// Draw circular arcs between the points\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tctx.arc(me.xCenter, me.yCenter, yCenterOffset, 0, Math.PI * 2);\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Draw straight lines connecting each index\n\t\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\t\tfor (var i = 0; i < me.getValueCount(); i++) {\n\t\t\t\t\t\t\t\t\tvar pointPosition = me.getPointPosition(i, yCenterOffset);\n\t\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tickOpts.display) {\n\t\t\t\t\t\t\tvar tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\t\t\t\tctx.font = tickLabelFont;\n\t\t\t\t\t\t\tctx.setFontSize(tickFontSize);\n\t\t\t\t\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\t\t\t\t\tvar labelWidth = ctx.measureText(label).width;\n\t\t\t\t\t\t\t\tctx.setFillStyle(tickOpts.backdropColor);\n\t\t\t\t\t\t\t\tctx.fillRect(\n\t\t\t\t\t\t\t\t\tme.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t\t\t\t\tyHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\t\t\t\t\tlabelWidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\t\t\t\t\ttickFontSize + tickOpts.backdropPaddingY * 2\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t\tctx.setFillStyle(tickFontColor);\n\t\t\t\t\t\t\tctx.fillText(label, me.xCenter, yHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!opts.lineArc) {\n\t\t\t\t\tctx.setLineWidth(angleLineOpts.lineWidth);\n\t\t\t\t\tctx.setStrokeStyle(angleLineOpts.color);\n\t\t\t\t\tvar outerDistance = me.getDistanceFromCenterForValue(opts.reverse ? me.min : me.max);\n\t\t\t\t\t// Point Label Font\n\t\t\t\t\tvar pointLabelFontSize = getValueOrDefault(pointLabelOpts.fontSize, globalDefaults.defaultFontSize);\n\t\t\t\t\tvar pointLabeFontStyle = getValueOrDefault(pointLabelOpts.fontStyle, globalDefaults.defaultFontStyle);\n\t\t\t\t\tvar pointLabeFontFamily = getValueOrDefault(pointLabelOpts.fontFamily, globalDefaults.defaultFontFamily);\n\t\t\t\t\tvar pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);\n\t\t\t\t\tfor (var i = me.getValueCount() - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (angleLineOpts.display) {\n\t\t\t\t\t\t\tvar outerPosition = me.getPointPosition(i, outerDistance);\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo(me.xCenter, me.yCenter);\n\t\t\t\t\t\t\tctx.lineTo(outerPosition.x, outerPosition.y);\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\tctx.closePath();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Extra 3px out for some label spacing\n\t\t\t\t\t\tvar pointLabelPosition = me.getPointPosition(i, outerDistance + 5);\n\t\t\t\t\t\t// Keep this in loop since we may support array properties here\n\t\t\t\t\t\tvar pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\t\t\t\t\tctx.font = pointLabeFont;\n\t\t\t\t\t\tctx.setFontSize(pointLabelFontSize);\n\t\t\t\t\t\tctx.setFillStyle(pointLabelFontColor);\n\t\t\t\t\t\tvar pointLabels = me.pointLabels;\n\t\t\t\t\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\t\t\t\t\tvar angleRadians = this.getIndexAngle(i) + (Math.PI / 2);\n\t\t\t\t\t\tvar angle = (angleRadians * 360 / (2 * Math.PI)) % 360;\n\t\t\t\t\t\tif (angle === 0 || angle === 180) {\n\t\t\t\t\t\t\tctx.textAlign = 'center';\n\t\t\t\t\t\t} else if (angle < 180) {\n\t\t\t\t\t\t\tctx.textAlign = 'left';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Set the correct text baseline based on outer positioning\n\t\t\t\t\t\tif (angle === 90 || angle === 270) {\n\t\t\t\t\t\t\tctx.textBaseline = 'middle';\n\t\t\t\t\t\t} else if (angle > 270 || angle < 90) {\n\t\t\t\t\t\t\tctx.textBaseline = 'bottom';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.textBaseline = 'top';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tctx.fillText(pointLabels[i] ? pointLabels[i] : '', pointLabelPosition.x, pointLabelPosition.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tChart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);\n};\n"]}