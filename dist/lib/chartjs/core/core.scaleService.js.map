{"version":3,"sources":["lib/chartjs/core/core.scaleService.js"],"names":["module","exports","Chart","helpers","scaleService","constructors","defaults","registerScaleType","type","scaleConstructor","clone","getScaleConstructor","hasOwnProperty","undefined","getScaleDefaults","scaleMerge","scale","updateScaleDefaults","additions","extend","addScalesToLayout","chartInstance","each","scales","layoutService","addBox"],"mappings":"AAAA;;AACAA,OAAOC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AAChC,KAAIC,UAAUD,MAAMC,OAApB;AACAD,OAAME,YAAN,GAAqB;AACpB;AACA;AACAC,gBAAc,EAHM;AAIpB;AACA;AACA;AACAC,YAAU,EAPU;AAQpBC,qBAAmB,2BAASC,IAAT,EAAeC,gBAAf,EAAiCH,QAAjC,EAA2C;AAC7D,QAAKD,YAAL,CAAkBG,IAAlB,IAA0BC,gBAA1B;AACA,QAAKH,QAAL,CAAcE,IAAd,IAAsBL,QAAQO,KAAR,CAAcJ,QAAd,CAAtB;AACA,GAXmB;AAYpBK,uBAAqB,6BAASH,IAAT,EAAe;AACnC,UAAO,KAAKH,YAAL,CAAkBO,cAAlB,CAAiCJ,IAAjC,IAAyC,KAAKH,YAAL,CAAkBG,IAAlB,CAAzC,GAAmEK,SAA1E;AACA,GAdmB;AAepBC,oBAAkB,0BAASN,IAAT,EAAe;AAChC;AACA,UAAO,KAAKF,QAAL,CAAcM,cAAd,CAA6BJ,IAA7B,IAAqCL,QAAQY,UAAR,CAAmBb,MAAMI,QAAN,CAAeU,KAAlC,EAAyC,KAAKV,QAAL,CAAcE,IAAd,CAAzC,CAArC,GAAqG,EAA5G;AACA,GAlBmB;AAmBpBS,uBAAqB,6BAAST,IAAT,EAAeU,SAAf,EAA0B;AAC9C,OAAIZ,WAAW,KAAKA,QAApB;AACA,OAAIA,SAASM,cAAT,CAAwBJ,IAAxB,CAAJ,EAAmC;AAClCF,aAASE,IAAT,IAAiBL,QAAQgB,MAAR,CAAeb,SAASE,IAAT,CAAf,EAA+BU,SAA/B,CAAjB;AACA;AACD,GAxBmB;AAyBpBE,qBAAmB,2BAASC,aAAT,EAAwB;AAC1C;AACAlB,WAAQmB,IAAR,CAAaD,cAAcE,MAA3B,EAAmC,UAASP,KAAT,EAAgB;AAClDd,UAAMsB,aAAN,CAAoBC,MAApB,CAA2BJ,aAA3B,EAA0CL,KAA1C;AACA,IAFD;AAGA;AA9BmB,EAArB;AAgCA,CAlCD","file":"core.scaleService.js","sourcesContent":["'use strict';\nmodule.exports = function(Chart) {\n\tvar helpers = Chart.helpers;\n\tChart.scaleService = {\n\t\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t\t// use the new chart options to grab the correct scale\n\t\tconstructors: {},\n\t\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t\t// old browsers\n\t\t// Scale config defaults\n\t\tdefaults: {},\n\t\tregisterScaleType: function(type, scaleConstructor, defaults) {\n\t\t\tthis.constructors[type] = scaleConstructor;\n\t\t\tthis.defaults[type] = helpers.clone(defaults);\n\t\t},\n\t\tgetScaleConstructor: function(type) {\n\t\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t\t},\n\t\tgetScaleDefaults: function(type) {\n\t\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\t\treturn this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n\t\t},\n\t\tupdateScaleDefaults: function(type, additions) {\n\t\t\tvar defaults = this.defaults;\n\t\t\tif (defaults.hasOwnProperty(type)) {\n\t\t\t\tdefaults[type] = helpers.extend(defaults[type], additions);\n\t\t\t}\n\t\t},\n\t\taddScalesToLayout: function(chartInstance) {\n\t\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\t\thelpers.each(chartInstance.scales, function(scale) {\n\t\t\t\tChart.layoutService.addBox(chartInstance, scale);\n\t\t\t});\n\t\t}\n\t};\n};\n"]}