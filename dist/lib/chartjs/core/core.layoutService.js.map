{"version":3,"sources":["lib/chartjs/core/core.layoutService.js"],"names":["module","exports","Chart","helpers","layoutService","defaults","addBox","chartInstance","box","boxes","push","removeBox","splice","indexOf","update","width","height","layoutOptions","options","layout","padding","leftPadding","rightPadding","topPadding","bottomPadding","isNaN","left","right","top","bottom","leftBoxes","where","position","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","sort","a","b","fullWidth","chartWidth","chartHeight","chartAreaWidth","chartAreaHeight","verticalBoxWidth","length","horizontalBoxHeight","maxChartAreaWidth","maxChartAreaHeight","minBoxSizes","getMinimumBoxSize","minSize","isHorizontal","horizontal","each","concat","totalLeftBoxesWidth","totalRightBoxesWidth","totalTopBoxesHeight","totalBottomBoxesHeight","fitBox","minBoxSize","findNextWhere","minBox","scaleMargin","finalFitVerticalBox","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","chartArea"],"mappings":"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","file":"core.layoutService.js","sourcesContent":["'use strict';\nmodule.exports = function(Chart) {\n\tvar helpers = Chart.helpers;\n\t// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n\t// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n\t// It is this service's responsibility of carrying out that layout.\n\tChart.layoutService = {\n\t\tdefaults: {},\n\t\t// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.\n\t\taddBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\tchartInstance.boxes = [];\n\t\t\t}\n\t\t\tchartInstance.boxes.push(box);\n\t\t},\n\t\tremoveBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);\n\t\t},\n\t\t// The most important function\n\t\tupdate: function(chartInstance, width, height) {\n\t\t\tif (!chartInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar layoutOptions = chartInstance.options.layout;\n\t\t\tvar padding = layoutOptions ? layoutOptions.padding : null;\n\t\t\tvar leftPadding = 0;\n\t\t\tvar rightPadding = 0;\n\t\t\tvar topPadding = 0;\n\t\t\tvar bottomPadding = 0;\n\t\t\tif (!isNaN(padding)) {\n\t\t\t\t// options.layout.padding is a number. assign to all\n\t\t\t\tleftPadding = padding;\n\t\t\t\trightPadding = padding;\n\t\t\t\ttopPadding = padding;\n\t\t\t\tbottomPadding = padding;\n\t\t\t} else {\n\t\t\t\tleftPadding = padding.left || 0;\n\t\t\t\trightPadding = padding.right || 0;\n\t\t\t\ttopPadding = padding.top || 0;\n\t\t\t\tbottomPadding = padding.bottom || 0;\n\t\t\t}\n\t\t\tvar leftBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'left';\n\t\t\t});\n\t\t\tvar rightBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'right';\n\t\t\t});\n\t\t\tvar topBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'top';\n\t\t\t});\n\t\t\tvar bottomBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'bottom';\n\t\t\t});\n\t\t\t// Boxes that overlay the chartarea such as the radialLinear scale\n\t\t\tvar chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'chartArea';\n\t\t\t});\n\t\t\t// Ensure that full width boxes are at the very top / bottom\n\t\t\ttopBoxes.sort(function(a, b) {\n\t\t\t\treturn (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);\n\t\t\t});\n\t\t\tbottomBoxes.sort(function(a, b) {\n\t\t\t\treturn (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);\n\t\t\t});\n\t\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t\t// Our canvas looks like the following.\n\t\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t\t// B1 is the bottom axis\n\t\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t\t// an error will be thrown.\n\t\t\t//\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  T1 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |    |    |                 T2                  |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    | C1 |                           | C2 |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    | C3 |                           | C4 |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    |                 B1                  |    |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  B2 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t//\n\t\t\t// What we do to find the best sizing, we do the following\n\t\t\t// 1. Determine the minimum size of the chart area.\n\t\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t\t// 6. Refit each axis\n\t\t\t// 7. Position each axis in the final location\n\t\t\t// 8. Tell the chart the final location of the chart area\n\t\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\t\t\t// Step 1\n\t\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\t\t\tvar chartAreaHeight = chartHeight / 2; // min 50%\n\t\t\t// Step 2\n\t\t\tvar verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);\n\t\t\t// Step 3\n\t\t\tvar horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);\n\t\t\t// Step 4\n\t\t\tvar maxChartAreaWidth = chartWidth;\n\t\t\tvar maxChartAreaHeight = chartHeight;\n\t\t\tvar minBoxSizes = [];\n\t\t\tfunction getMinimumBoxSize(box) {\n\t\t\t\tvar minSize;\n\t\t\t\tvar isHorizontal = box.isHorizontal();\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);\n\t\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t\t} else {\n\t\t\t\t\tminSize = box.update(verticalBoxWidth, chartAreaHeight);\n\t\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t\t}\n\t\t\t\tminBoxSizes.push({\n\t\t\t\t\thorizontal: isHorizontal,\n\t\t\t\t\tminSize: minSize,\n\t\t\t\t\tbox: box\n\t\t\t\t});\n\t\t\t}\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);\n\t\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t\t// be if the axes are drawn at their minimum sizes.\n\t\t\t// Steps 5 & 6\n\t\t\tvar totalLeftBoxesWidth = leftPadding;\n\t\t\tvar totalRightBoxesWidth = rightPadding;\n\t\t\tvar totalTopBoxesHeight = topPadding;\n\t\t\tvar totalBottomBoxesHeight = bottomPadding;\n\t\t\t// Function to fit a box\n\t\t\tfunction fitBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\t\treturn minBox.box === box;\n\t\t\t\t});\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\t\tleft: totalLeftBoxesWidth,\n\t\t\t\t\t\t\tright: totalRightBoxesWidth,\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\t\tbox.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), fitBox);\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\t\t\t// Set the Left and Right margins for the horizontal boxes\n\t\t\thelpers.each(topBoxes.concat(bottomBoxes), fitBox);\n\t\t\t// Figure out how much margin is on the top and bottom of the vertical boxes\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\t\t\tfunction finalFitVerticalBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\t\treturn minSize.box === box;\n\t\t\t\t});\n\t\t\t\tvar scaleMargin = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\t\tbottom: totalBottomBoxesHeight\n\t\t\t\t};\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Let the left layout know the final margin\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);\n\t\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\t\ttotalLeftBoxesWidth = leftPadding;\n\t\t\ttotalRightBoxesWidth = rightPadding;\n\t\t\ttotalTopBoxesHeight = topPadding;\n\t\t\ttotalBottomBoxesHeight = bottomPadding;\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\t\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t\t// without calling `fit` again\n\t\t\tvar newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;\n\t\t\tvar newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;\n\t\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t\t}\n\t\t\t// Step 7 - Position the boxes\n\t\t\tvar left = leftPadding;\n\t\t\tvar top = topPadding;\n\t\t\tfunction placeBox(box) {\n\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\tbox.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;\n\t\t\t\t\tbox.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;\n\t\t\t\t\tbox.top = top;\n\t\t\t\t\tbox.bottom = top + box.height;\n\t\t\t\t\t// Move to next point\n\t\t\t\t\ttop = box.bottom;\n\t\t\t\t} else {\n\t\t\t\t\tbox.left = left;\n\t\t\t\t\tbox.right = left + box.width;\n\t\t\t\t\tbox.top = totalTopBoxesHeight;\n\t\t\t\t\tbox.bottom = totalTopBoxesHeight + maxChartAreaHeight;\n\t\t\t\t\t// Move to next point\n\t\t\t\t\tleft = box.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\thelpers.each(leftBoxes.concat(topBoxes), placeBox);\n\t\t\t// Account for chart width and height\n\t\t\tleft += maxChartAreaWidth;\n\t\t\ttop += maxChartAreaHeight;\n\t\t\thelpers.each(rightBoxes, placeBox);\n\t\t\thelpers.each(bottomBoxes, placeBox);\n\t\t\t// Step 8\n\t\t\tchartInstance.chartArea = {\n\t\t\t\tleft: totalLeftBoxesWidth,\n\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\tright: totalLeftBoxesWidth + maxChartAreaWidth,\n\t\t\t\tbottom: totalTopBoxesHeight + maxChartAreaHeight\n\t\t\t};\n\t\t\t// Step 9\n\t\t\thelpers.each(chartAreaBoxes, function(box) {\n\t\t\t\tbox.left = chartInstance.chartArea.left;\n\t\t\t\tbox.top = chartInstance.chartArea.top;\n\t\t\t\tbox.right = chartInstance.chartArea.right;\n\t\t\t\tbox.bottom = chartInstance.chartArea.bottom;\n\t\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t\t});\n\t\t}\n\t};\n};\n"]}